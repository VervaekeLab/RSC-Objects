function [mData,data] = rsc_light()

%% ----- LOAD DATA

% LOAD DATA
% Don't print all outputs generated by functions
global verbose
verbose = false;
warning('off','all');

recs = {
    'm1442_20211019_01', ... % new
    'm1444_20211019_01', ... % new
    'm1445_20211019_01', ... % new
    'm1446_20211019_01', ... % new
    'm1447_20211019_01', ... % new 
    };

mData = struct();

% Load each sData
for f = 1:length(recs)
    load(fullfile(getPathToDir('experimentdata'),recs{f}));
    mData(f).sData = sData;
end

data.recs = recs;
data.nSessions = length(mData);


% Preprocess data
for s = 1:length(mData)
    
    % Downsample the light voltage signal
    mData(s).sData.daqdata.lightDS = mData(s).sData.daqdata.light_voltage(mData(s).sData.daqdata.frameIndex);
    
    % Get data from sData
    sData = mData(s).sData;
    
    pos = sData.behavior.wheelPosDsBinned;
    lap = sData.behavior.wheelLapDsBinned;
    dff = sData.imdata.roiSignals(2).dffSubtractedNpil;
    deconv = smoothdata(sData.imdata.roiSignals(2).deconv','gaussian',10)'; % Smooth the deconvolved signal for a 300 ms (-ish) window
    run = sData.behavior.runSpeedDs;
    
    % Create struct to store all rastermaps
    rmaps = struct();
    
    % Create a binary array of which sample is above or below a running speed threshold
    run_thresholded = [run<2];
    
    % Createx rastermap for deconvolved signal
    rmaps.deconv = sb.generate.rasterMaps(pos,lap,deconv,...
        'smoothing',5, ...
        'exclude_inds', run_thresholded);
    
    % Create rastermap for dF/F signals
    rmaps.dff = sb.generate.rasterMaps(pos,lap,dff, 'exclude_inds', run_thresholded);
    
    % Create rastermap for run speed signal
    rmaps.run = sb.generate.rasterMaps(pos,lap,run,'smoothing',0,'exclude_inds', run_thresholded);
    
    mData(s).rmaps = rmaps;
    
    % Get light voltage signal
    light = mData(s).sData.daqdata.lightDS;
    
    % Create rastermap for the light
    mData(s).rmaps.light.all = sb.generate.rasterMaps(pos,lap,light);
    
    
    % For each lap, grab average voltage
    light_levels_per_lap = round(nanmean(mData(s).rmaps.light.all,2),3);
    
    laps_light_level_1 = find(light_levels_per_lap == 0);
    laps_light_level_2 = find(light_levels_per_lap == 0.03);
    laps_light_level_3 = find(light_levels_per_lap == 0.1);
    laps_light_level_4 = find(light_levels_per_lap > 0.5);
    
    mData(s).rmaps.level1.dff = rmaps.dff(laps_light_level_1,:,:);
    mData(s).rmaps.level1.deconv = rmaps.deconv(laps_light_level_1,:,:);
    mData(s).rmaps.level2.dff = rmaps.dff(laps_light_level_2,:,:);
    mData(s).rmaps.level2.deconv = rmaps.deconv(laps_light_level_2,:,:);
    mData(s).rmaps.level3.dff = rmaps.dff(laps_light_level_3,:,:);
    mData(s).rmaps.level3.deconv = rmaps.deconv(laps_light_level_3,:,:);
    mData(s).rmaps.level4.dff = rmaps.dff(laps_light_level_4,:,:);
    mData(s).rmaps.level4.deconv = rmaps.deconv(laps_light_level_4,:,:);
    
    % Create rastermap of the light signal for control
    mData(s).rmaps.light.level1 = mData(s).rmaps.light.all(laps_light_level_1,:);
    mData(s).rmaps.light.level2 = mData(s).rmaps.light.all(laps_light_level_2,:);
    mData(s).rmaps.light.level3 = mData(s).rmaps.light.all(laps_light_level_3,:);
    mData(s).rmaps.light.level4 = mData(s).rmaps.light.all(laps_light_level_4,:);
    
end



% Find the number of place cells and landmark cells at each light level
for s = 1:length(mData)
    for level = {'level1','level2','level3','level4'}
        
        level = level{1};
        
        % Find active cells
        acs = sb.classify.activeRoisAPT(mData(s).sData.imdata.roiSignals(2).dffSubtractedNpil); % threshold used. 0.3
        
        %         % Find all place cells
        pcs = sb.classify.placeCellsShuffle(mData(s).rmaps.(level).deconv);
        %
        % Find landmark/touch cells
        lcs = sb.classify.landmarkCellsByShuffling(mData(s).rmaps.(level).deconv);
        
        % Remove lcs from pcs list
        pcs = pcs([~ismember(pcs,lcs)]);
        
        % Include only cells that show dFF activity
        lcs = lcs(ismember(lcs,acs));
        pcs = pcs(ismember(pcs,acs));
        
        mData(s).rmaps.(level).pcs = pcs;
        mData(s).rmaps.(level).lcs = lcs;
        mData(s).rmaps.(level).acs = find(acs);
        
    end
    
end






end